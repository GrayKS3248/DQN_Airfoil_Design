cp= np.reshape(control_point_set[:,curr_control_point],(1,2,1))
cp_normal=control_point_normal

panel_length = np.linalg.norm(pj_set - pjp1_set,axis=0)
s1 = np.linspace(pj_set,pjp1_set,self.precision,axis=0)
s_norm = np.linspace(0.0, panel_length, self.precision)
r1 = cp - s1
r_norm_sq = np.sum(r1**2,axis=1)
den = 2 * np.pi * r_norm_sq
minus_rx = -1.0 * r1[:,0,:]
ry = r1[:,1,:]
vx_prime_j = np.trapz(ry * (self.num_j / den), x=s_norm, axis=0)
vx_prime_jp1 = np.trapz(ry * (self.num_jp1 / den), x=s_norm, axis=0)
vy_prime_j = np.trapz(minus_rx * (self.num_j / den), x=s_norm, axis=0)
vy_prime_jp1 = np.trapz(minus_rx * (self.num_jp1 / den), x=s_norm, axis=0)
nx = cp_normal[0]
ny = cp_normal[1]
vn_prime_j = nx * vx_prime_j + ny * vy_prime_j
vn_prime_jp1 = nx * vx_prime_jp1 + ny * vy_prime_jp1
vn_prime = np.append(vn_prime_j, 0.0) + np.insert(vn_prime_jp1,0,0.0)
vx_prime = np.append(vx_prime_j, 0.0) + np.insert(vx_prime_jp1,0,0.0)
vy_prime = np.append(vy_prime_j, 0.0) + np.insert(vy_prime_jp1,0,0.0)

panel_length[inducing panel]
s[integration points, axis, inducing panel]
s_norm[integration points, inducing panel]
r[integration points, axis, inducing panel]
r_norm_sq[integration points, inducing panel]
den[integration points, inducing panel]
minus_rx[integration points, inducing panel]
num_j [integration points, -]
vx_prime_...[inducing panel]
vy_prime_...[inducing panel]
vn_prime_...[inducing panel]